// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: stats.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stats_GetTasks_FullMethodName           = "/OfflinePush.Stats.Stats/GetTasks"
	Stats_GetTaskGroup_FullMethodName       = "/OfflinePush.Stats.Stats/GetTaskGroup"
	Stats_GetPushCount_FullMethodName       = "/OfflinePush.Stats.Stats/GetPushCount"
	Stats_GetPushDataByDay_FullMethodName   = "/OfflinePush.Stats.Stats/GetPushDataByDay"
	Stats_GetUserDataByDay_FullMethodName   = "/OfflinePush.Stats.Stats/GetUserDataByDay"
	Stats_GetOnlineUserBy24H_FullMethodName = "/OfflinePush.Stats.Stats/GetOnlineUserBy24H"
)

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	GetTasks(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksResp, error)
	GetTaskGroup(ctx context.Context, in *GetTaskGroupReq, opts ...grpc.CallOption) (*GetTaskGroupResp, error)
	GetPushCount(ctx context.Context, in *GetPushCountReq, opts ...grpc.CallOption) (*GetPushCountResp, error)
	GetPushDataByDay(ctx context.Context, in *GetPushDataByDayReq, opts ...grpc.CallOption) (*GetPushDataByDayResp, error)
	GetUserDataByDay(ctx context.Context, in *GetUserDataByDayReq, opts ...grpc.CallOption) (*GetUserDataByDayResp, error)
	GetOnlineUserBy24H(ctx context.Context, in *GetOnlineUserBy24HReq, opts ...grpc.CallOption) (*GetOnlineUserBy24HResp, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) GetTasks(ctx context.Context, in *GetTasksReq, opts ...grpc.CallOption) (*GetTasksResp, error) {
	out := new(GetTasksResp)
	err := c.cc.Invoke(ctx, Stats_GetTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetTaskGroup(ctx context.Context, in *GetTaskGroupReq, opts ...grpc.CallOption) (*GetTaskGroupResp, error) {
	out := new(GetTaskGroupResp)
	err := c.cc.Invoke(ctx, Stats_GetTaskGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetPushCount(ctx context.Context, in *GetPushCountReq, opts ...grpc.CallOption) (*GetPushCountResp, error) {
	out := new(GetPushCountResp)
	err := c.cc.Invoke(ctx, Stats_GetPushCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetPushDataByDay(ctx context.Context, in *GetPushDataByDayReq, opts ...grpc.CallOption) (*GetPushDataByDayResp, error) {
	out := new(GetPushDataByDayResp)
	err := c.cc.Invoke(ctx, Stats_GetPushDataByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetUserDataByDay(ctx context.Context, in *GetUserDataByDayReq, opts ...grpc.CallOption) (*GetUserDataByDayResp, error) {
	out := new(GetUserDataByDayResp)
	err := c.cc.Invoke(ctx, Stats_GetUserDataByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetOnlineUserBy24H(ctx context.Context, in *GetOnlineUserBy24HReq, opts ...grpc.CallOption) (*GetOnlineUserBy24HResp, error) {
	out := new(GetOnlineUserBy24HResp)
	err := c.cc.Invoke(ctx, Stats_GetOnlineUserBy24H_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility
type StatsServer interface {
	GetTasks(context.Context, *GetTasksReq) (*GetTasksResp, error)
	GetTaskGroup(context.Context, *GetTaskGroupReq) (*GetTaskGroupResp, error)
	GetPushCount(context.Context, *GetPushCountReq) (*GetPushCountResp, error)
	GetPushDataByDay(context.Context, *GetPushDataByDayReq) (*GetPushDataByDayResp, error)
	GetUserDataByDay(context.Context, *GetUserDataByDayReq) (*GetUserDataByDayResp, error)
	GetOnlineUserBy24H(context.Context, *GetOnlineUserBy24HReq) (*GetOnlineUserBy24HResp, error)
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (UnimplementedStatsServer) GetTasks(context.Context, *GetTasksReq) (*GetTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedStatsServer) GetTaskGroup(context.Context, *GetTaskGroupReq) (*GetTaskGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskGroup not implemented")
}
func (UnimplementedStatsServer) GetPushCount(context.Context, *GetPushCountReq) (*GetPushCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushCount not implemented")
}
func (UnimplementedStatsServer) GetPushDataByDay(context.Context, *GetPushDataByDayReq) (*GetPushDataByDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushDataByDay not implemented")
}
func (UnimplementedStatsServer) GetUserDataByDay(context.Context, *GetUserDataByDayReq) (*GetUserDataByDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataByDay not implemented")
}
func (UnimplementedStatsServer) GetOnlineUserBy24H(context.Context, *GetOnlineUserBy24HReq) (*GetOnlineUserBy24HResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUserBy24H not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetTasks(ctx, req.(*GetTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetTaskGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetTaskGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetTaskGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetTaskGroup(ctx, req.(*GetTaskGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetPushCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetPushCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetPushCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetPushCount(ctx, req.(*GetPushCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetPushDataByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushDataByDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetPushDataByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetPushDataByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetPushDataByDay(ctx, req.(*GetPushDataByDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetUserDataByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataByDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetUserDataByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetUserDataByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetUserDataByDay(ctx, req.(*GetUserDataByDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetOnlineUserBy24H_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineUserBy24HReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetOnlineUserBy24H(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_GetOnlineUserBy24H_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetOnlineUserBy24H(ctx, req.(*GetOnlineUserBy24HReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OfflinePush.Stats.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasks",
			Handler:    _Stats_GetTasks_Handler,
		},
		{
			MethodName: "GetTaskGroup",
			Handler:    _Stats_GetTaskGroup_Handler,
		},
		{
			MethodName: "GetPushCount",
			Handler:    _Stats_GetPushCount_Handler,
		},
		{
			MethodName: "GetPushDataByDay",
			Handler:    _Stats_GetPushDataByDay_Handler,
		},
		{
			MethodName: "GetUserDataByDay",
			Handler:    _Stats_GetUserDataByDay_Handler,
		},
		{
			MethodName: "GetOnlineUserBy24H",
			Handler:    _Stats_GetOnlineUserBy24H_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats.proto",
}
